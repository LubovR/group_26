{
	"info": {
		"_postman_id": "1013c2b5-b5ba-4c88-921b-7b3a1b9819a1",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2.Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Проверить, что в body приходит правильный string",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"let resp_family = jsonData.family;",
							"console.log(\"resp_family = \", resp_family)",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Lubochka\");",
							"});",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"35\");",
							"});",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.salary).to.eql(35000);",
							"});",
							"",
							"//7. Спарсить request.",
							"var reqBody = request.data;",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(request.data.name);",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.age).to.eql(request.data.age);",
							"});",
							"",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(String(jsonData.salary)).to.eql(request.data.salary);",
							"});",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year)",
							"    .to.eql(request.data.salary*4)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lubochka",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "35000",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3?name=Lubochka&age=35&salary=35000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lubochka"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "35000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(pm.request.url.query.get(\"name\"));",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.age).to.eql(pm.request.url.query.get(\"age\"));",
							"});",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(String(jsonData.salary)).to.eql(pm.request.url.query.get(\"salary\"));",
							"});",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"let resp_family = jsonData.family;",
							"console.log(\"resp_family = \", resp_family)",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nastya&age=25&salary=40000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nastya"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "40000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json",
							"    var jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.name).to.eql(pm.request.url.query.get(\"name\"));",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(String(jsonData.age)).to.eql(pm.request.url.query.get(\"age\"));",
							"});",
							"",
							"//7. Вывести в консоль параметр salary из request.",
							"var req_salary = pm.request.url.query.get(\"salary\");",
							"console.log(req_salary)",
							"",
							"//8. Вывести в консоль параметр salary из response.",
							"let resp_salary = jsonData.salary;",
							"console.log(\"resp_salary = \", resp_salary)",
							"",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"resp_salary = \", resp_salary[0])",
							"",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(\"resp_salary = \", resp_salary[1])",
							"",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(\"resp_salary = \", resp_salary[2])",
							"",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Your test name 12\", function () {",
							"    pm.expect(String(jsonData.salary[0])).to.eql(pm.request.url.query.get(\"salary\"));",
							"});",
							"",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Your test name 13\", function () {",
							"    pm.expect(jsonData.salary[1]).to.eql(String(pm.request.url.query.get(\"salary\")*2));",
							"});",
							"//Or",
							"pm.test(\"Your test name 13-2\", function () {",
							"    pm.expect(jsonData.salary[1]*1).to.eql(pm.request.url.query.get(\"salary\")*2);",
							"});",
							"",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Your test name 14\", function () {",
							"    pm.expect(jsonData.salary[2]).to.eql(String(pm.request.url.query.get(\"salary\")*3));",
							"});",
							"",
							"//16. Вставить параметр name в окружение в name",
							"pm.environment.set(\"name\", pm.request.url.query.get(\"name\"))",
							"",
							"//17. Вставить параметр salary из окружения в request",
							"pm.environment.set(\"salary\", pm.request.url.query.get(\"salary\"))",
							"",
							"//18. Вставить параметр age из окружения в age",
							"pm.environment.set(\"age\", pm.request.url.query.get(\"age\"))",
							"",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (var key of jsonData.salary) {",
							"    console.log(\"salary=\", key)",
							"};",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "name",
						"value": "Nadya",
						"type": "text"
					},
					{
						"key": "age",
						"value": "37",
						"type": "text"
					},
					{
						"key": "salary",
						"value": "40000",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nadya&age=37&salary=40000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nadya"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "40000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//6. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"",
							"//7. Спарсить request.",
							"var reqBody = request.data;",
							"",
							"//1. Вставить параметр salary из окружения в request",
							"pm.environment.set(\"salary\", (request.data.salary))",
							"",
							"//2. Вставить параметр age из окружения в age",
							"pm.environment.set(\"age\", (request.data.age))",
							"",
							"//3. Вставить параметр name из окружения в name",
							"pm.environment.set(\"name\", (request.data.name))",
							"",
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Your test name 8\", function () {",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Your test name 9\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Your test name 10\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Your test name 11\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Your test name 12\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"//13. Проверить, что json response имеет параметр person",
							"pm.test(\"Your test name 12\", function () {",
							"    pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Your test name 14\", function () {",
							"    pm.expect(String(jsonData.start_qa_salary))",
							"    .to.eql(request.data.salary)",
							"});",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Your test name 15\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months)",
							"    .to.eql(request.data.salary*2)",
							"});",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Your test name 16\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months)",
							"    .to.eql(request.data.salary*2.7)",
							"});",
							"",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Your test name 17\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"])",
							"    .to.eql(request.data.salary*3.3)",
							"});",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Your test name 18\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"])",
							"    .to.eql(request.data.salary*3.8)",
							"});",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Your test name 19\", function () {",
							"    pm.expect(String(jsonData.person.u_name[1]))",
							"    .to.eql(request.data.salary)",
							"});",
							"",
							"//20. Проверить, что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Your test name 20\", function () {",
							"    pm.expect(String(jsonData.person.u_age))",
							"    .to.eql(request.data.age)",
							"});",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Your test name 21\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years)",
							"    .to.eql(request.data.salary*4.2)",
							"});",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (var i in jsonData.person){",
							"    console.log(jsonData.person[i])",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nastya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}